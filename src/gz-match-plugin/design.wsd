@startuml
!define COMMENT(x) <color:grey>x</color>

class gzMatchPlugin {
	- robot1: Entity
	- robot2: Entity
	- world: World
	- team1 : Team
	- team2 : Team
	- actionList: List<GameAction> 
	COMMENT(stores the actions to be updated)
	+ startMatch(): void
	+ timeRemaining(): float
	+ isMatchFinished(): Boolean
	+ getTeam1(): Entity
	+ getTeam2(): Entity
	+ getWorld(): World
}

class gzMatchPlugin implements System, ISystemConfigure, ISystemPostUpdate {
}


Interface ISystemConfigure {
	+ Configure(): void
}

Interface ISystemPostUpdate {
	+ PostUpdate(): void
}

class Team{
	- name: String
	- color : Stringx
	- scorePrediction : int
	- robot : Entity
	
	+ getName(): String 
	+ setRobot(Robot: Entity): void
	+ setPrediction(int: score): void // need to expose this to ros2 so that the algorithm can set the score
}

Team "1" *-- "2" gzMatchPlugin : Contains

abstract class GameAction implements IupdateAction, IgetScores, IupdateStart, IupdateEnd, Ireset{
	# world: World
	# team1 : Team
	# team2 : Team
	- actionName : String 
	COMMENT(for printing scores)
	# runningScore1: int 
	# runningScore2: int 
	+ updateAction(): void
	+ GameAction(): GameAction
	+ GameAction(Team : team1): GameAction
	+ GameAction(Team : team2): GameAction
	+ GameAction(Team : team1, Team : team2): GameAction
	+ GameAction(Team : team1, Team : team2): GameAction
	+ GameAction(Team : team1, Team : team2, world World): GameAction
	+ setWorld(World : world): void
	+ getScores(score1 : *int, score2 : *int): void
}

interface IgetScores{
	COMMENT(used to get the scores)
	+ getScores(score1 : *int, score2 : *int): void
}

interface IupdateAction{
	COMMENT(Update that happens every frame)
	+ updateAction(): void
}

interface IupdateStart{
	+ updateStart(): void
	COMMENT(used to update an action)
	COMMENT(if need be at the begining of the match)
}

interface IupdateEnd{
	+ updateEnd(): void
	COMMENT(used to update an action)
	COMMENT(if need be at the begining of the match)
	COMMENT(for example the prediction of the score)
}

interface Ireset{
	+ resetAction(): void
	COMMENT(used to reset to pregame state)
}


gzMatchPlugin --|> IupdateAction
gzMatchPlugin --|> IgetScores
gzMatchPlugin --|> IupdateStart
gzMatchPlugin --|> IupdateEnd
gzMatchPlugin --|> Ireset


GameAction "1" *-- "0--*" gzMatchPlugin : Contains

class gazebo {}

gazebo --|> ISystemPostUpdate
gazebo --|> ISystemConfigure

class PanelAction extends GameAction{
	- panelModelNames : List<String>
	- panelModels: List<Entity>
	- minAngleBlue: float
	- minAngleYellow: float
	- minAngleBlueYellow: float
	- maxAngleBlueYellow: float

	+ PanelAction(): PanelAction
	+ PanelAction(Team : team1, Team : team2): PanelAction
	+ updateAction(): void
	- getPanelState(panel : Entity): tuple<bool, bool>)
	- getPanelAngle(panel : Entity): float
}

class PlantAction extends GameAction{
	- plantModelNames : List<String>
	- plantModels: List<Entity>
	- zones : List<List<tuple<float, float>>>
	
	+ PlantAction(): PlantAction
	+ PlantAction(Team : team1, Team : team2): PlantAction
	+ updateAction(): void
	- getPlantState(plant : Entity): tuple<bool, bool>
	- getPlantPosition(plant : Entity): gz::math::Pose3d ? 
}

class robotNoGoZones extends GameAction{
	- robotModelNames : List<String>
	- robotModels: List<Entity>
	- wasPresent : tuple<bool, bool>
	COMMENT(used to check if the robot was ever present in the zone)
	- zones : List<List<tuple<float, float>>>
	COMMENT(Probably not the best way to store the zones positions)

	+ robotNoGoZones(): robotNoGoZones
	+ robotNoGoZones(Team : team1, Team : team2): robotNoGoZones
	+ updateAction(): void
	- getRobotState(robot : Entity): tuple<bool, bool>
	- getRobotPosition(robot : Entity): gz::math::Pose3d ? 
}


class robotReturnZone extends GameAction{
	- robotModelNames : List<String>
	- robotModels: List<Entity>
	- startingZone : int
	COMMENT(inddex of starting zone)
	- zones : List<List<tuple<float, float>>>
	COMMENT(Probably not the best way to store the zones positions)

	+ robotReturnZone(): robotNoGoZones
	+ robotReturnZone(Team : team1, Team : team2): robotNoGoZones
	+ updateStart(): void
	{method} COMMENT(used to get the start zone of the robot)
	+ updateEnd(): void
	{method} COMMENT(used to get the end zone of the robot)
	+ getScores(): void
	- getRobotState(robot : Entity): tuple<bool, bool>
	- getRobotPosition(robot : Entity): gz::math::Pose3d ? 
	- getRobotZone(robot : Entity): int
	{method} COMMENT(get the zone (index) of the robot)
	{method} COMMENT(returns -1 if the robot is not in a zone)
}

@enduml